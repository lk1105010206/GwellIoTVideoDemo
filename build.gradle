// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.30"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
        // 技威私有仓库地址
        maven { url 'http://192.168.1.229:44444/nexus/repository/gwell-android-libs/' }
        flatDir {
            dirs 'libs'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def getGitCommitCount() {
    Integer gitCommitCount
    try {
        gitCommitCount = 'git rev-list HEAD --first-parent --count'.execute().text.trim().toInteger()
    }
    catch (ignored) {
        gitCommitCount = 1
    }
    // 8364是从svn迁移到git上时，最后的svn版本号
    int version = gitCommitCount + 8364
    println("git last revision is " + version)
    return version
}

def getGitCommitHead() {
    String lastCommitHead
    try {
        lastCommitHead = "git rev-parse --short HEAD".execute().text.trim()
    }
    catch (ignored) {
        lastCommitHead = "error_version"
    }
    // 8364是从svn迁移到git上时，最后的svn版本号
    println("git last commit head is " + lastCommitHead)
    return lastCommitHead
}

def getGitBranch() {
    return 'git symbolic-ref --short -q HEAD'.execute().text.trim()
}

ext {
    versionCode = getGitCommitCount()
    commitHead = getGitCommitHead()
    versionName = "1.4.${Integer.toHexString(versionCode)}(${commitHead})"
    // 上传到远程仓库的库版本号，考虑到使用提交记录数值过大，故单独采用版本号命名，每段版本版本号最大两位
    libVersion = "1.0.11"
    gitBranch = getGitBranch()
}
